{"version":3,"sources":["AddCategory.js","helpers/GetGifs.js","GifGridItem.js","GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAGXC,mBAAS,IAHE,mBAGxCC,EAHwC,KAG5BC,EAH4B,KAmB/C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCXlBG,EAAQ,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,+DAGDI,MAAQF,GAHP,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATlB,kBAabM,GAba,4CAAH,sDCCRO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAkB,IAAfnB,EAAc,EAAdA,SAAc,ECAZ,SAAEA,GAAa,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAyBvC,OAlBCC,qBAAW,WAEJxB,EAAUC,GACTwB,MAAM,SAAAd,GAEHY,EAAS,CACLf,KAAKG,EACLU,SAAS,SAOxB,CAACpB,IAIKqB,EDvBuBI,CAAczB,GAAnCa,EAF4B,EAEjCN,KAAaa,EAFoB,EAEpBA,QAEjB,OACE,qCACA,qBAAIJ,UAAU,oCAAd,cAAqDhB,KACrD,uBAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAET,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAEC,GAAF,OACV,cAAC,EAAD,eAEOA,GADEA,EAAIC,aEUde,EAxBO,WAAO,IAAD,EACWxC,mBAAS,CAAC,eADrB,mBAClByC,EADkB,KACN1C,EADM,KAIrB,OACC,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEAA,SAAaA,GADLA,Y,MCb5B4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a5a2583c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes  from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ( { setCategories }) => {\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    const handlInputChange =  (e) => {\r\n        setInputValue(e.target.value);\r\n    } \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if( inputValue.trim().length>2){\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');    \r\n        }\r\n         \r\n    }\r\n    return (\r\n        <form onSubmit= { handleSubmit}>\r\n            <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange= { handlInputChange }\r\n\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifts = async ( category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=l6DbCn2pF6szSOztdkvDiQDhfZzF8xiB`;\r\n    const resp = await fetch ( url );\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n      }\r\n    })\r\n\r\n    return gifs;\r\n  \r\n  }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">  \r\n            <img src={ url } alt= { title} />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from './hooks/useFetchGifs';\r\nimport {GifGridItem}  from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category}) => {\r\n\r\nconst { data:images, loading } =  useFetchGifs( category);\r\n\r\n    return (\r\n      <>      \r\n      <h3 className=\"animate__animated animate__fadeIn\"> { category }</h3> \r\n      <hr />\r\n\r\n      { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\r\n\r\n        { <div className=\"card-grid\">\r\n            {\r\n              images.map( ( img ) =>(\r\n                <GifGridItem\r\n                  key= { img.id }\r\n                  { ...img }\r\n                />\r\n                ))\r\n            }\r\n        </div >}\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport  { getGifts } from '../helpers/GetGifs';\r\n\r\nexport const  useFetchGifs = ( category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n     useEffect( () => {\r\n\r\n            getGifts( category )\r\n            .then( img => {\r\n\r\n                setState({\r\n                    data:img,\r\n                    loading: false\r\n                });   \r\n        \r\n             })\r\n            \r\n\r\n       \r\n  }, [category] )\r\n\r\n\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory'\r\nimport { GifGrid } from './GifGrid'\r\n\r\nconst GiftExpertApp = () => {\r\n   const [categories, setCategories] = useState(['Death Note'])\r\n\r\n\r\n       return (\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>\r\n                    <GifGrid \r\n                    key = { category }\r\n                    category = { category}\r\n                     />     \r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GiftExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}